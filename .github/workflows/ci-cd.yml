name: 🚀 CI/CD Pipeline - Plateforme EPE

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.1'

jobs:
  # ===== TESTS BACKEND LARAVEL =====
  backend-tests:
    name: 🔧 Backend Tests (Laravel)
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug

    - name: 📦 Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: backend/vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: 🎼 Install Composer dependencies
      working-directory: ./backend
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: 📋 Copy environment file
      working-directory: ./backend
      run: cp .env.testing .env

    - name: 🔑 Generate application key
      working-directory: ./backend
      run: php artisan key:generate

    - name: 🗄️ Run database migrations
      working-directory: ./backend
      run: php artisan migrate --force
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: 📚 Seed essential data
      working-directory: ./backend
      run: |
        php artisan db:seed --class=CountriesSeeder --force
        php artisan db:seed --class=SubscriptionPlansSeeder --force
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: 🧪 Run PHPUnit tests
      working-directory: ./backend
      run: vendor/bin/phpunit --testdox
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: 🔍 Run Laravel Pint (Code Style)
      working-directory: ./backend
      run: vendor/bin/pint --test

  # ===== TESTS FRONTEND REACT =====
  frontend-tests:
    name: ⚛️ Frontend Tests (React)
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🧪 Run Jest tests
      working-directory: ./frontend
      run: npm run test:ci

    - name: 🔍 Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: 🏗️ Build production
      working-directory: ./frontend
      run: npm run build

  # ===== QUALITÉ ET SÉCURITÉ =====
  code-quality:
    name: 📊 Code Quality
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite

    - name: 📦 Install Composer dependencies
      working-directory: ./backend
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: 🔍 Run PHPStan
      working-directory: ./backend
      run: ./vendor/bin/phpstan analyse --memory-limit=1G

    - name: 🛡️ Composer Audit
      working-directory: ./backend
      run: composer audit

  # ===== TESTS E2E (optionnel) =====
  e2e-tests:
    name: 🎭 E2E Tests (Optional)
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🎭 Install Playwright
      working-directory: ./e2e-tests
      run: |
        npm ci
        npx playwright install --with-deps chromium

    - name: 🧪 Run E2E tests
      working-directory: ./e2e-tests
      run: npx playwright test --project=chromium --reporter=github
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000

  # ===== DÉPLOIEMENT =====
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.plateforme-epe.com

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "✅ Deployment simulation completed"

  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://plateforme-epe.com

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏭 Deploy to production
      run: |
        echo "🏭 Deploying to production environment..."
        echo "✅ Production deployment simulation completed"

  # ===== NOTIFICATIONS =====
  notify-success:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, code-quality]
    if: success()

    steps:
    - name: 🎉 Success notification
      run: |
        echo "🎉 All tests passed successfully!"
        echo "✅ Backend tests: PASSED"
        echo "✅ Frontend tests: PASSED"
        echo "✅ Code quality: PASSED"

  notify-failure:
    name: 📢 Notify Failure
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, code-quality]
    if: failure()

    steps:
    - name: ❌ Failure notification
      run: |
        echo "❌ Some tests failed!"
        echo "Please check the logs above for details."