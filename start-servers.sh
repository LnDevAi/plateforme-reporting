#!/bin/bash

# üöÄ Script de D√©marrage - Assistant IA Expert EPE
# Lance automatiquement le backend Laravel et le frontend React

set -e

echo "üéØ === D√âMARRAGE ASSISTANT IA EXPERT EPE ==="
echo ""

# Configuration des couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleurs
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier la configuration
check_requirements() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js n'est pas install√©. Installez Node.js 18+ pour continuer."
        exit 1
    fi
    
    # V√©rifier NPM
    if ! command -v npm &> /dev/null; then
        log_error "NPM n'est pas install√©. Installez NPM pour continuer."
        exit 1
    fi
    
    # V√©rifier PHP (si disponible)
    if command -v php &> /dev/null; then
        log_success "PHP d√©tect√©: $(php --version | head -n1)"
    else
        log_warning "PHP non d√©tect√©. Le backend n√©cessitera une installation s√©par√©e."
    fi
    
    # V√©rifier la structure du projet
    if [ ! -d "backend" ] || [ ! -d "frontend" ]; then
        log_error "Structure de projet invalide. Assurez-vous d'√™tre dans le r√©pertoire racine."
        exit 1
    fi
    
    log_success "Pr√©requis valid√©s"
}

# Fonction de pr√©paration du backend
prepare_backend() {
    log_info "Pr√©paration du backend Laravel..."
    
    cd backend
    
    # V√©rifier .env
    if [ ! -f ".env" ]; then
        log_warning "Fichier .env manquant. Copie depuis .env.example..."
        cp .env.example .env
    fi
    
    # V√©rifier les cl√©s IA
    if grep -q "your_openai_api_key_here" .env && grep -q "your_claude_api_key_here" .env; then
        log_warning "üîë ATTENTION: Configurez vos cl√©s API IA dans backend/.env"
        log_warning "   Voir CONFIGURATION-IA.md pour les instructions d√©taill√©es"
    fi
    
    # Installer les d√©pendances (si Composer disponible)
    if command -v composer &> /dev/null; then
        log_info "Installation des d√©pendances PHP..."
        composer install --no-dev --optimize-autoloader
        log_success "D√©pendances PHP install√©es"
    else
        log_warning "Composer non d√©tect√©. Installation manuelle requise."
    fi
    
    # G√©n√©rer la cl√© d'application (si PHP disponible)
    if command -v php &> /dev/null; then
        if ! grep -q "APP_KEY=" .env || grep -q "APP_KEY=$" .env; then
            log_info "G√©n√©ration de la cl√© d'application..."
            php artisan key:generate
        fi
        
        # Migrations (si DB configur√©e)
        log_info "Tentative de migration de la base de donn√©es..."
        php artisan migrate --force 2>/dev/null || log_warning "Migrations √©chou√©es - configurez d'abord la base de donn√©es"
        
        log_success "Backend Laravel pr√©par√©"
    else
        log_warning "PHP non disponible. Configuration manuelle du backend requise."
    fi
    
    cd ..
}

# Fonction de pr√©paration du frontend
prepare_frontend() {
    log_info "Pr√©paration du frontend React..."
    
    cd frontend
    
    # Installer les d√©pendances
    if [ ! -d "node_modules" ]; then
        log_info "Installation des d√©pendances NPM..."
        npm install
        log_success "D√©pendances NPM install√©es"
    else
        log_success "D√©pendances NPM d√©j√† install√©es"
    fi
    
    cd ..
}

# Fonction de d√©marrage
start_servers() {
    log_info "D√©marrage des serveurs..."
    
    # Cr√©er les fichiers de log
    mkdir -p logs
    
    # D√©marrer le backend (si PHP disponible)
    if command -v php &> /dev/null; then
        log_info "D√©marrage du backend Laravel sur http://localhost:8000..."
        cd backend
        php artisan serve --host=0.0.0.0 --port=8000 > ../logs/backend.log 2>&1 &
        BACKEND_PID=$!
        cd ..
        
        # Attendre que le backend d√©marre
        sleep 3
        
        if ps -p $BACKEND_PID > /dev/null; then
            log_success "Backend d√©marr√© (PID: $BACKEND_PID)"
            echo $BACKEND_PID > logs/backend.pid
        else
            log_error "√âchec du d√©marrage du backend"
            cat logs/backend.log
            exit 1
        fi
    else
        log_warning "Backend non d√©marr√© - PHP non disponible"
    fi
    
    # D√©marrer le frontend
    log_info "D√©marrage du frontend React sur http://localhost:3000..."
    cd frontend
    
    # D√©finir les variables d'environnement React
    export REACT_APP_API_URL="http://localhost:8000/api"
    export BROWSER=none  # √âviter l'ouverture automatique du navigateur
    
    npm start > ../logs/frontend.log 2>&1 &
    FRONTEND_PID=$!
    cd ..
    
    # Attendre que le frontend d√©marre
    sleep 5
    
    if ps -p $FRONTEND_PID > /dev/null; then
        log_success "Frontend d√©marr√© (PID: $FRONTEND_PID)"
        echo $FRONTEND_PID > logs/frontend.pid
    else
        log_error "√âchec du d√©marrage du frontend"
        cat logs/frontend.log
        exit 1
    fi
}

# Fonction d'affichage des informations de connexion
show_access_info() {
    echo ""
    echo "üéâ === SERVEURS D√âMARR√âS AVEC SUCC√àS ==="
    echo ""
    log_success "üåê Application Web: http://localhost:3000"
    log_success "üîß API Backend: http://localhost:8000"
    log_success "ü§ñ Assistant IA: http://localhost:3000/ai-assistant"
    echo ""
    log_info "üìä Logs en temps r√©el :"
    log_info "   Backend: tail -f logs/backend.log"
    log_info "   Frontend: tail -f logs/frontend.log"
    echo ""
    log_info "üõë Arr√™ter les serveurs :"
    log_info "   ./stop-servers.sh"
    echo ""
    log_warning "üîë N'oubliez pas de configurer vos cl√©s API IA dans backend/.env"
    log_warning "üìñ Voir CONFIGURATION-IA.md pour les d√©tails"
    echo ""
}

# Fonction principale
main() {
    echo "üöÄ D√©marrage de l'Assistant IA Expert EPE..."
    echo "üìÅ R√©pertoire: $(pwd)"
    echo ""
    
    check_requirements
    prepare_backend
    prepare_frontend
    start_servers
    show_access_info
    
    # Garder le script actif
    log_info "Appuyez sur Ctrl+C pour arr√™ter les serveurs"
    
    # Gestionnaire de signal pour arr√™t propre
    trap 'log_info "Arr√™t des serveurs..."; ./stop-servers.sh 2>/dev/null; exit 0' INT TERM
    
    # Boucle infinie pour garder le script actif
    while true; do
        sleep 1
    done
}

# Ex√©cution
main "$@"