version: '3.8'

services:
  # Backend API pour tests
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: epe-backend-test
    environment:
      - APP_ENV=testing
      - APP_DEBUG=true
      - APP_KEY=base64:test-key-for-development-only
      - DB_HOST=postgres-test
      - DB_PORT=5432
      - DB_DATABASE=epe_test
      - DB_USERNAME=epe_test
      - DB_PASSWORD=test_password
      - REDIS_HOST=redis-test
      - REDIS_PORT=6379
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - MAIL_MAILER=array
      - BROADCAST_DRIVER=log
      - OPENAI_API_KEY=test-openai-key
      - CLAUDE_API_KEY=test-claude-key
      - AI_DEFAULT_PROVIDER=openai
    volumes:
      - ./backend:/var/www/html
      - ./backend/storage:/var/www/html/storage
      - backend-test-vendor:/var/www/html/vendor
    ports:
      - "8001:8000"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - epe-test-network
    command: >
      bash -c "
        composer install --no-interaction --prefer-dist --optimize-autoloader &&
        php artisan config:cache &&
        php artisan route:cache &&
        php artisan migrate:fresh --seed --force &&
        php artisan serve --host=0.0.0.0 --port=8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend pour tests E2E
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: epe-frontend-test
    environment:
      - NODE_ENV=test
      - VITE_API_BASE_URL=http://backend-test:8000/api
      - VITE_APP_ENV=testing
    volumes:
      - ./frontend:/app
      - frontend-test-node-modules:/app/node_modules
    ports:
      - "3001:3000"
    depends_on:
      - backend-test
    networks:
      - epe-test-network
    command: >
      bash -c "
        npm ci &&
        npm run build &&
        npm run preview -- --host 0.0.0.0 --port 3000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Base de données PostgreSQL pour tests
  postgres-test:
    image: postgres:15-alpine
    container_name: epe-postgres-test
    environment:
      - POSTGRES_DB=epe_test
      - POSTGRES_USER=epe_test
      - POSTGRES_PASSWORD=test_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-test-data:/var/lib/postgresql/data
      - ./database/init-test.sql:/docker-entrypoint-initdb.d/init-test.sql:ro
    ports:
      - "5433:5432"
    networks:
      - epe-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U epe_test -d epe_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis pour cache et sessions tests
  redis-test:
    image: redis:7-alpine
    container_name: epe-redis-test
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-test-data:/data
    ports:
      - "6380:6379"
    networks:
      - epe-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Service pour tests PHPUnit backend
  backend-phpunit:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: testing
    container_name: epe-backend-phpunit
    environment:
      - APP_ENV=testing
      - DB_HOST=postgres-test
      - DB_DATABASE=epe_test
      - DB_USERNAME=epe_test
      - DB_PASSWORD=test_password
      - REDIS_HOST=redis-test
      - CACHE_DRIVER=array
      - SESSION_DRIVER=array
      - QUEUE_CONNECTION=sync
      - MAIL_MAILER=array
    volumes:
      - ./backend:/var/www/html
      - ./backend/storage/logs:/var/www/html/storage/logs
      - backend-test-vendor:/var/www/html/vendor
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - epe-test-network
    command: >
      bash -c "
        composer install --no-interaction --prefer-dist --optimize-autoloader &&
        php artisan config:clear &&
        php artisan migrate:fresh --seed --force &&
        vendor/bin/phpunit --configuration phpunit.xml --coverage-html=coverage --log-junit=coverage/junit.xml
      "
    profiles:
      - testing

  # Service pour tests Jest frontend
  frontend-jest:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: testing
    container_name: epe-frontend-jest
    environment:
      - NODE_ENV=test
      - CI=true
    volumes:
      - ./frontend:/app
      - frontend-test-node-modules:/app/node_modules
    networks:
      - epe-test-network
    command: >
      bash -c "
        npm ci &&
        npm run test:ci
      "
    profiles:
      - testing

  # Service pour tests E2E Playwright
  e2e-playwright:
    build:
      context: ./e2e-tests
      dockerfile: Dockerfile
    container_name: epe-e2e-playwright
    environment:
      - PLAYWRIGHT_BASE_URL=http://frontend-test:3000
      - API_BASE_URL=http://backend-test:8000/api
      - CI=true
    volumes:
      - ./e2e-tests:/app
      - ./e2e-tests/test-results:/app/test-results
      - playwright-browsers:/ms-playwright
    depends_on:
      frontend-test:
        condition: service_healthy
      backend-test:
        condition: service_healthy
    networks:
      - epe-test-network
    command: >
      bash -c "
        npm ci &&
        npx playwright install --with-deps chromium firefox webkit &&
        npx playwright test --reporter=html
      "
    profiles:
      - e2e

  # Service pour tests de performance K6
  performance-k6:
    image: grafana/k6:latest
    container_name: epe-performance-k6
    environment:
      - K6_OUT=json=results.json
      - BASE_URL=http://backend-test:8000
    volumes:
      - ./performance-tests:/scripts
      - ./performance-tests/results:/results
    depends_on:
      backend-test:
        condition: service_healthy
    networks:
      - epe-test-network
    command: run /scripts/api-load-test.js
    profiles:
      - performance

  # Service pour tests de sécurité OWASP ZAP
  security-zap:
    image: owasp/zap2docker-stable
    container_name: epe-security-zap
    volumes:
      - ./security-tests/reports:/zap/wrk
    depends_on:
      frontend-test:
        condition: service_healthy
      backend-test:
        condition: service_healthy
    networks:
      - epe-test-network
    command: >
      bash -c "
        zap-full-scan.py -t http://frontend-test:3000 -J zap-frontend-report.json &&
        zap-full-scan.py -t http://backend-test:8000/api -J zap-api-report.json
      "
    profiles:
      - security

  # Service pour monitoring des tests
  test-monitor:
    image: grafana/grafana:latest
    container_name: epe-test-monitor
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    volumes:
      - grafana-test-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3002:3000"
    networks:
      - epe-test-network
    profiles:
      - monitoring

  # Base de données pour tests de stress
  postgres-stress:
    image: postgres:15-alpine
    container_name: epe-postgres-stress
    environment:
      - POSTGRES_DB=epe_stress
      - POSTGRES_USER=epe_stress
      - POSTGRES_PASSWORD=stress_password
    volumes:
      - ./database/stress-data.sql:/docker-entrypoint-initdb.d/stress-data.sql:ro
    ports:
      - "5434:5432"
    networks:
      - epe-test-network
    profiles:
      - stress

volumes:
  postgres-test-data:
    driver: local
  redis-test-data:
    driver: local
  backend-test-vendor:
    driver: local
  frontend-test-node-modules:
    driver: local
  grafana-test-data:
    driver: local
  playwright-browsers:
    driver: local

networks:
  epe-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16