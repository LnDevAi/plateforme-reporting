# Stage 1: build frontend
FROM node:20-alpine AS fe
WORKDIR /fe
COPY ["E REPORTING-IA-JAVA/frontend/package.json", "./package.json"]
RUN npm install --no-audit --no-fund
COPY ["E REPORTING-IA-JAVA/frontend/", "./"]
RUN npm run build

# Stage 2: build backend
FROM maven:3.9-eclipse-temurin-17 AS be
WORKDIR /be
COPY ["E REPORTING-IA-JAVA/backend/pom.xml", "./pom.xml"]
RUN mvn -q -DskipTests dependency:go-offline
COPY ["E REPORTING-IA-JAVA/backend/src", "./src"]
RUN mvn -q -DskipTests clean package

# Stage 3: runtime with nginx + java
FROM debian:bookworm-slim
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends nginx supervisor ca-certificates openjdk-17-jre gettext-base && rm -rf /var/lib/apt/lists/*

# Copy Angular build to nginx html
COPY --from=fe /fe/dist/reporting-frontend /usr/share/nginx/html
# Copy Spring Boot jar
COPY --from=be /be/target/backend-0.0.1-SNAPSHOT.jar /app/app.jar

# Nginx config (templated with ${PORT}) and supervisor
COPY ["E REPORTING-IA-JAVA/deploy/nginx-site.conf", "/etc/nginx/conf.d/default.conf"]
COPY ["E REPORTING-IA-JAVA/deploy/supervisord.conf", "/etc/supervisor/conf.d/supervisord.conf"]
COPY ["E REPORTING-IA-JAVA/deploy/entrypoint.sh", "/entrypoint.sh"]
RUN chmod +x /entrypoint.sh

# Expose runtime port (Render injecte PORT)
EXPOSE 8080
ENV SERVER_PORT=8081
CMD ["/entrypoint.sh"]