name: 🛡️ Security Scan

on:
  schedule:
    - cron: '0 2 * * 1'  # Tous les lundis à 2h du matin
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ===== SCAN DEPENDANCES =====
  dependency-scan:
    name: 📦 Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Snyk to check for vulnerabilities
      uses: snyk/actions/php@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: 📊 Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif

  # ===== SCAN SECRETS =====
  secret-scan:
    name: 🔐 Secret Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Run GitLeaks
      uses: zricethezav/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔍 Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # ===== ANALYSE STATIQUE =====
  static-analysis:
    name: 🔬 Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: 📦 Install Composer dependencies
      working-directory: ./backend
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: 🔍 Run PHPStan
      working-directory: ./backend
      run: vendor/bin/phpstan analyse --error-format=sarif > phpstan-results.sarif
      continue-on-error: true

    - name: 📊 Upload PHPStan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: backend/phpstan-results.sarif

  # ===== SCAN DOCKER =====
  docker-scan:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        tags: epe-backend:security-scan
        load: true

    - name: 🏗️ Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        tags: epe-frontend:security-scan
        load: true

    - name: 🔍 Run Trivy scanner on backend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'epe-backend:security-scan'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'

    - name: 🔍 Run Trivy scanner on frontend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'epe-frontend:security-scan'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: 📊 Upload Trivy backend results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-backend-results.sarif'

    - name: 📊 Upload Trivy frontend results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-frontend-results.sarif'

  # ===== CODEQL ANALYSIS =====
  codeql:
    name: 🕵️ CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'php' ]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # ===== OWASP ZAP =====
  owasp-zap:
    name: 🕷️ OWASP ZAP Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🕷️ Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'https://staging.epe-platform.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # ===== NOTIFICATIONS =====
  notify-security:
    name: 📢 Security Notifications
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, static-analysis, docker-scan, codeql]
    if: failure()
    
    steps:
    - name: 📢 Notify security team
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '🚨 Security vulnerabilities detected in EPE Platform!'
        webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK }}

    - name: 📧 Send email alert
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.MAIL_SERVER }}
        server_port: 587
        username: ${{ secrets.MAIL_USERNAME }}
        password: ${{ secrets.MAIL_PASSWORD }}
        subject: '[SECURITY ALERT] EPE Platform Vulnerabilities Detected'
        to: ${{ secrets.SECURITY_EMAIL }}
        from: 'noreply@epe-platform.com'
        body: |
          Security vulnerabilities have been detected in the EPE Platform repository.
          
          Please review the security scan results immediately:
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Workflow: ${{ github.workflow }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}