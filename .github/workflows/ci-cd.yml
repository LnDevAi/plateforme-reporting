name: 🚀 CI/CD Pipeline - Plateforme EPE

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.1'

jobs:
  # ===== TESTS BACKEND LARAVEL =====
  backend-tests:
    name: 🔧 Backend Tests (Laravel)
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug

    - name: 📦 Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: backend/vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: 🎼 Install Composer dependencies
      working-directory: ./backend
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: 📋 Copy environment file
      working-directory: ./backend
      run: cp .env.testing .env

    - name: 🔑 Generate application key
      working-directory: ./backend
      run: php artisan key:generate

    - name: 🗄️ Run database migrations
      working-directory: ./backend
      run: php artisan migrate --force
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: 📚 Seed database
      working-directory: ./backend
      run: |
        php artisan db:seed --class=CountriesSeeder
        php artisan db:seed --class=SubscriptionPlansSeeder
        php artisan db:seed --class=CoursesSeeder
        php artisan elearning:setup-custom-modules --force

    - name: 🧪 Run PHPUnit tests
      working-directory: ./backend
      run: vendor/bin/phpunit --coverage-clover coverage.xml
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

    - name: 🔍 Run Laravel Pint (Code Style)
      working-directory: ./backend
      run: vendor/bin/pint --test

    - name: 🛡️ Run Security Check
      working-directory: ./backend
      run: composer audit

  # ===== TESTS FRONTEND REACT =====
  frontend-tests:
    name: ⚛️ Frontend Tests (React)
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🔍 Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: 🧪 Run tests
      working-directory: ./frontend
      run: npm run test:coverage

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/clover.xml
        flags: frontend

    - name: 🏗️ Build production
      working-directory: ./frontend
      run: npm run build

    - name: 📁 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist

  # ===== TESTS E2E =====
  e2e-tests:
    name: 🎭 E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 🎼 Install backend dependencies
      working-directory: ./backend
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: 📦 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 📥 Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist

    - name: 🎭 Install Playwright
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: 🔧 Setup backend for E2E
      working-directory: ./backend
      run: |
        cp .env.testing .env
        php artisan key:generate
        php artisan migrate --force
        php artisan db:seed --class=CountriesSeeder
        php artisan db:seed --class=SubscriptionPlansSeeder
        php artisan elearning:setup-custom-modules --force

    - name: 🚀 Start backend server
      working-directory: ./backend
      run: php artisan serve --host=127.0.0.1 --port=8000 &
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: 🌐 Start frontend server
      working-directory: ./frontend
      run: npm run preview -- --host 127.0.0.1 --port 3000 &

    - name: ⏳ Wait for servers
      run: |
        timeout 60 bash -c 'until curl -s http://127.0.0.1:8000/api/health; do sleep 1; done'
        timeout 60 bash -c 'until curl -s http://127.0.0.1:3000; do sleep 1; done'

    - name: 🎭 Run E2E tests
      working-directory: ./frontend
      run: npx playwright test

    - name: 📁 Upload E2E artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-results
        path: |
          frontend/test-results/
          frontend/playwright-report/

  # ===== SECURITY SCAN =====
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ===== DEPLOYMENT STAGING =====
  deploy-staging:
    name: 🚧 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.epe-platform.com

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: 🏗️ Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ secrets.REGISTRY_URL }}/epe-backend:staging-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.REGISTRY_URL }}/epe-frontend:staging-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🚀 Deploy to staging
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          k8s/staging/deployment.yml
          k8s/staging/service.yml
          k8s/staging/ingress.yml
        images: |
          ${{ secrets.REGISTRY_URL }}/epe-backend:staging-${{ github.sha }}
          ${{ secrets.REGISTRY_URL }}/epe-frontend:staging-${{ github.sha }}
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: 🧪 Run smoke tests
      run: |
        curl -f https://staging.epe-platform.com/api/health
        curl -f https://staging.epe-platform.com/

  # ===== DEPLOYMENT PRODUCTION =====
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://epe-platform.com

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: 🏗️ Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/epe-backend:latest
          ${{ secrets.REGISTRY_URL }}/epe-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/epe-frontend:latest
          ${{ secrets.REGISTRY_URL }}/epe-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🚀 Deploy to production
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          k8s/production/deployment.yml
          k8s/production/service.yml
          k8s/production/ingress.yml
        images: |
          ${{ secrets.REGISTRY_URL }}/epe-backend:${{ github.sha }}
          ${{ secrets.REGISTRY_URL }}/epe-frontend:${{ github.sha }}
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: 🧪 Run production smoke tests
      run: |
        curl -f https://epe-platform.com/api/health
        curl -f https://epe-platform.com/

    - name: 📢 Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🚀 EPE Platform deployed to production successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===== NOTIFICATIONS =====
  notify-failure:
    name: 📢 Notify on Failure
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan, deploy-staging, deploy-production]
    if: failure()

    steps:
    - name: 📢 Notify failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ EPE Platform CI/CD pipeline failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}